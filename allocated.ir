__global_init {
	__global_init_0_block_enter
		jump __global_init_1_block_exit
	__global_init_1_block_exit
}
foo d(r12) x(rsi) y(rbx) {
	foo_0_block_enter
		d(r12) = mov t0(rdi)
		x(rsi) = mov t1(rsi)
		y(rbx) = mov t2(rdx)
		t3(r8) = mov d(r12)
		t3(r8) = t3(r8) MUL 1000
		t4(rdi) = mov x(rsi)
		t4(rdi) = t4(rdi) MUL 10
		t5(r8) = mov t3(r8)
		t5(r8) = t5(r8) ADD t4(rdi)
		t6(rdi) = mov t5(r8)
		t6(rdi) = t6(rdi) ADD y(rbx)
		t8(rdi) = mov t6(rdi)
		call println_Int return value = t7(rax)
		cmp d(r12) 1
		set EQ t11(rdi)
		cmp t11(rdi) 1
		CJump EQ foo_1_if_true
		jump foo_2_if_false
	foo_1_if_true
		jump foo_4_block_exit
	foo_2_if_false
		jump foo_3_if_exit
	foo_3_if_exit
		t(rdi) = mov x(rsi)
		x(rsi) = mov y(rbx)
		y(rbx) = mov t(rdi)
		t12(rdi) = mov 1
		t13(rsi) = mov x(rsi)
		t14(rdx) = mov y(rbx)
		call foo return value = null
		t15(rdi) = mov d(r12)
		t15(rdi) = t15(rdi) MUL 1000
		t16(rsi) = mov x(rsi)
		t16(rsi) = t16(rsi) MUL 10
		t17(rdi) = mov t15(rdi)
		t17(rdi) = t17(rdi) ADD t16(rsi)
		t18(rsi) = mov t17(rdi)
		t18(rsi) = t18(rsi) ADD y(rbx)
		t20(rdi) = mov t18(rsi)
		call println_Int return value = t19(rax)
		jump foo_4_block_exit
	foo_4_block_exit
}
main {
	main_0_block_enter
		a(rdi) = mov 3100
		c(rsi) = mov 1
		b(rbx) = mov 0
		jump main_1_loop_condition
	main_1_loop_condition
		jump main_2_loop_body
	main_2_loop_body
		jump main_3_loop_increment
	main_3_loop_increment
		jump main_4_loop_exit
	main_4_loop_exit
		t27(rdi) = mov a(rdi)
		call println_Int return value = t26(rax)
		jump main_6_inline_enter
	main_6_inline_enter
		a(rdi) = mov 3100
		c(rsi) = mov 1
		b(rbx) = mov 0
		jump main_7_loop_condition
	main_7_loop_condition
		jump main_8_loop_body
	main_8_loop_body
		jump main_9_loop_increment
	main_9_loop_increment
		jump main_10_loop_exit
	main_10_loop_exit
		t48(rdi) = mov a(rdi)
		call println_Int return value = t47(rax)
		jump main_11_inline_exit
	main_11_inline_exit
		d(r12) = mov 7
		x(rsi) = mov 5
		y(rbx) = mov 3
		jump main_12_inline_enter
	main_12_inline_enter
		t51(r8) = mov d(r12)
		t51(r8) = t51(r8) MUL 1000
		t52(rdi) = mov x(rsi)
		t52(rdi) = t52(rdi) MUL 10
		t53(r8) = mov t51(r8)
		t53(r8) = t53(r8) ADD t52(rdi)
		t54(rdi) = mov t53(r8)
		t54(rdi) = t54(rdi) ADD y(rbx)
		t56(rdi) = mov t54(rdi)
		call println_Int return value = t55(rax)
		cmp d(r12) 1
		set EQ t59(rdi)
		cmp t59(rdi) 1
		CJump EQ main_13_if_true
		jump main_14_if_false
	main_13_if_true
		jump main_16_inline_exit
	main_14_if_false
		jump main_15_if_exit
	main_15_if_exit
		t(rdi) = mov x(rsi)
		x(rsi) = mov y(rbx)
		y(rbx) = mov t(rdi)
		t60(rdi) = mov 1
		t61(rsi) = mov x(rsi)
		t62(rdx) = mov y(rbx)
		call foo return value = null
		t63(rdi) = mov d(r12)
		t63(rdi) = t63(rdi) MUL 1000
		t64(rsi) = mov x(rsi)
		t64(rsi) = t64(rsi) MUL 10
		t65(rdi) = mov t63(rdi)
		t65(rdi) = t65(rdi) ADD t64(rsi)
		t66(rsi) = mov t65(rdi)
		t66(rsi) = t66(rsi) ADD y(rbx)
		t68(rdi) = mov t66(rsi)
		call println_Int return value = t67(rax)
		jump main_16_inline_exit
	main_16_inline_exit
		t34(rsi) = mov 10
		INC t34(rsi)
		t34(rsi) = t34(rsi) SHL 3
		malloc t33(rsi) t34(rsi)
		Address (t33(rsi) + 0) = mov 10
		t36(rsi) = mov 2
		INC t36(rsi)
		t36(rsi) = t36(rsi) SHL 3
		malloc t35(rsi) t36(rsi)
		Address (t35(rsi) + 0) = mov 2
		ret 0
		jump main_5_block_exit
	main_5_block_exit
}
cost_a_lot_of_time {
	cost_a_lot_of_time_0_block_enter
		a(rdi) = mov 3100
		c(rsi) = mov 1
		b(rbx) = mov 0
		jump cost_a_lot_of_time_1_loop_condition
	cost_a_lot_of_time_1_loop_condition
		jump cost_a_lot_of_time_2_loop_body
	cost_a_lot_of_time_2_loop_body
		jump cost_a_lot_of_time_3_loop_increment
	cost_a_lot_of_time_3_loop_increment
		jump cost_a_lot_of_time_4_loop_exit
	cost_a_lot_of_time_4_loop_exit
		t41(rdi) = mov a(rdi)
		call println_Int return value = t40(rax)
		jump cost_a_lot_of_time_5_block_exit
	cost_a_lot_of_time_5_block_exit
}
