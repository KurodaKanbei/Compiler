__global_init {
	__global_init_0_block_enter
		jump __global_init_1_block_exit
	__global_init_1_block_exit
}
h a(rsi) {
	h_0_block_enter
		a(rsi) = mov t0(rdi)
		cmp a(rsi) 0
		set EQ t2(rbx)
		cmp t2(rbx) 1
		CJump EQ h_1_logical_true
		jump h_2_logical_false
	h_1_logical_true
		t1(rbx) = mov 1
		jump h_3_logical_exit
	h_2_logical_false
		cmp a(rsi) 1
		set EQ t3(rbx)
		t1(rbx) = mov t3(rbx)
		jump h_3_logical_exit
	h_3_logical_exit
		cmp t1(rbx) 1
		CJump EQ h_4_if_true
		jump h_5_if_false
	h_4_if_true
		ret 1
		jump h_11_block_exit
	h_5_if_false
		jump h_6_if_exit
	h_6_if_exit
		sum(r12) = mov 0
		i(rbx) = mov 0
		jump h_7_loop_condition
	h_7_loop_condition
		cmp i(rbx) a(rsi)
		set LE t4(rdi)
		cmp t4(rdi) 1
		CJump EQ h_8_loop_body
		jump h_10_loop_exit
	h_8_loop_body
		t6(rdi) = mov i(rbx)
		call h return value = t5(rax)
		t7(r8) = mov t5(rax)
		t8(rdi) = mov a(rsi)
		t8(rdi) = t8(rdi) SUB 1
		t9(rdi) = mov t8(rdi)
		t9(rdi) = t9(rdi) SUB i(rbx)
		t11(rdi) = mov t9(rdi)
		call h return value = t10(rax)
		t12(rdi) = mov t10(rax)
		t13(r8) = mov t7(r8)
		t13(r8) = t13(r8) MUL t12(rdi)
		t14(r12) = mov sum(r12)
		t14(r12) = t14(r12) ADD t13(r8)
		t15(r8) = mov i(rbx)
		t15(r8) = t15(r8) SHL 3
		t16(rdi) = mov Address (b(@b) + 0)
		t16(rdi) = t16(rdi) ADD t15(r8)
		t17(r12) = mov t14(r12)
		t17(r12) = t17(r12) ADD Address (t16(rdi) + 0)
		sum(r12) = mov t17(r12)
		jump h_9_loop_increment
	h_9_loop_increment
		INC i(rbx)
		jump h_7_loop_condition
	h_10_loop_exit
		ret sum(r12)
		jump h_11_block_exit
	h_11_block_exit
}
main {
	main_0_block_enter
		a(rsi) = mov 17
		jump main_2_inline_enter
	main_2_inline_enter
		cmp a(rsi) 0
		set EQ t27(rbx)
		cmp t27(rbx) 1
		CJump EQ main_3_logical_true
		jump main_4_logical_false
	main_3_logical_true
		t26(rbx) = mov 1
		jump main_5_logical_exit
	main_4_logical_false
		cmp a(rsi) 1
		set EQ t28(rbx)
		t26(rbx) = mov t28(rbx)
		jump main_5_logical_exit
	main_5_logical_exit
		cmp t26(rbx) 1
		CJump EQ main_6_if_true
		jump main_7_if_false
	main_6_if_true
		t21(rsi) = mov 1
		jump main_13_inline_exit
	main_7_if_false
		jump main_8_if_exit
	main_8_if_exit
		sum(r12) = mov 0
		i(rbx) = mov 0
		jump main_9_loop_condition
	main_9_loop_condition
		cmp i(rbx) a(rsi)
		set LE t29(rdi)
		cmp t29(rdi) 1
		CJump EQ main_10_loop_body
		jump main_12_loop_exit
	main_10_loop_body
		t31(rdi) = mov i(rbx)
		call h return value = t30(rax)
		t32(r8) = mov t30(rax)
		t33(rdi) = mov a(rsi)
		t33(rdi) = t33(rdi) SUB 1
		t34(rdi) = mov t33(rdi)
		t34(rdi) = t34(rdi) SUB i(rbx)
		t36(rdi) = mov t34(rdi)
		call h return value = t35(rax)
		t37(rdi) = mov t35(rax)
		t38(r8) = mov t32(r8)
		t38(r8) = t38(r8) MUL t37(rdi)
		t39(r12) = mov sum(r12)
		t39(r12) = t39(r12) ADD t38(r8)
		t40(r8) = mov i(rbx)
		t40(r8) = t40(r8) SHL 3
		t41(rdi) = mov Address (b(@b) + 0)
		t41(rdi) = t41(rdi) ADD t40(r8)
		t42(r12) = mov t39(r12)
		t42(r12) = t42(r12) ADD Address (t41(rdi) + 0)
		sum(r12) = mov t42(r12)
		jump main_11_loop_increment
	main_11_loop_increment
		INC i(rbx)
		jump main_9_loop_condition
	main_12_loop_exit
		t21(rsi) = mov sum(r12)
		jump main_13_inline_exit
	main_13_inline_exit
		t23(rdi) = mov t21(rsi)
		call println_Int return value = t22(rax)
		ret 0
		jump main_1_block_exit
	main_1_block_exit
}
