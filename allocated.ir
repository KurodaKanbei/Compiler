__global_init {
	__global_init_1_block_exit
}
func a(rdi) b(r11) c(r10) d(rsi) e(rbx) f(r8) g(null) {
	func_0_block_enter
		b(r11) = mov t9(rsi)
		c(r10) = mov t10(rdx)
		d(rsi) = mov t11(rcx)
		e(rbx) = mov t12(r8)
		f(r8) = mov t13(r9)
		cmp a(rdi) b(r11)
		set EQ t18(r9)
		cmp t18(r9) 1
		CJump NEQ func_2_logical_false
		jump func_1_logical_true
	func_1_logical_true
		cmp c(r10) 0
		set GR t19(r9)
		jump func_3_logical_exit
	func_2_logical_false
		t17(r9) = mov 0
		jump func_3_logical_exit
	func_3_logical_exit
		cmp t17(r9) 1
		CJump EQ func_4_logical_true
		jump func_5_logical_false
	func_4_logical_true
		t16(r9) = mov 1
		jump func_12_logical_exit
	func_5_logical_false
		cmp d(rsi) e(rbx)
		set EQ t22(r9)
		cmp t22(r9) 1
		CJump NEQ func_7_logical_false
		jump func_6_logical_true
	func_6_logical_true
		cmp f(r8) 0
		set GR t23(r9)
		jump func_8_logical_exit
	func_7_logical_false
		t21(r9) = mov 0
		jump func_8_logical_exit
	func_8_logical_exit
		cmp t21(r9) 1
		CJump NEQ func_10_logical_false
		jump func_9_logical_true
	func_9_logical_true
		cmp g(null) 0
		set GR t24(r9)
		jump func_12_logical_exit
	func_10_logical_false
		t20(r9) = mov 0
		jump func_12_logical_exit
	func_12_logical_exit
		cmp t16(r9) 1
		CJump EQ func_13_logical_true
		jump func_14_logical_false
	func_13_logical_true
		t15(rdi) = mov 1
		jump func_15_logical_exit
	func_14_logical_false
		cmp a(rdi) g(null)
		set EQ t25(rdi)
		jump func_15_logical_exit
	func_15_logical_exit
		cmp t15(rdi) 1
		CJump EQ func_16_logical_true
		jump func_17_logical_false
	func_16_logical_true
		t14(rsi) = mov 1
		jump func_21_logical_exit
	func_17_logical_false
		cmp d(rsi) 0
		set GR t27(rsi)
		cmp t27(rsi) 1
		CJump NEQ func_19_logical_false
		jump func_18_logical_true
	func_18_logical_true
		cmp f(r8) 0
		set GR t28(rsi)
		jump func_21_logical_exit
	func_19_logical_false
		t26(rsi) = mov 0
		jump func_21_logical_exit
	func_21_logical_exit
		cmp t14(rsi) 1
		CJump EQ func_22_if_true
		jump func_23_if_false
	func_22_if_true
		ret 1
		jump func_25_block_exit
	func_23_if_false
		ret 0
		jump func_25_block_exit
	func_25_block_exit
}
main {
	main_0_block_enter
		a(r8) = mov 1
		b(rbx) = mov 2
		c(r11) = mov 3
		d(rdi) = mov 4
		e(r10) = mov 5
		f(rsi) = mov 6
		g(r9) = mov 7
		jump main_2_inline_enter
	main_2_inline_enter
		cmp a(r8) b(rbx)
		set EQ t33(rbx)
		cmp t33(rbx) 1
		CJump NEQ main_4_logical_false
		jump main_3_logical_true
	main_3_logical_true
		cmp c(r11) 0
		set GR t34(r11)
		jump main_5_logical_exit
	main_4_logical_false
		t32(r11) = mov 0
		jump main_5_logical_exit
	main_5_logical_exit
		cmp t32(r11) 1
		CJump EQ main_6_logical_true
		jump main_7_logical_false
	main_6_logical_true
		t31(r10) = mov 1
		jump main_14_logical_exit
	main_7_logical_false
		cmp d(rdi) e(r10)
		set EQ t37(r10)
		cmp t37(r10) 1
		CJump NEQ main_9_logical_false
		jump main_8_logical_true
	main_8_logical_true
		cmp f(rsi) 0
		set GR t38(r10)
		jump main_10_logical_exit
	main_9_logical_false
		t36(r10) = mov 0
		jump main_10_logical_exit
	main_10_logical_exit
		cmp t36(r10) 1
		CJump NEQ main_12_logical_false
		jump main_11_logical_true
	main_11_logical_true
		cmp g(r9) 0
		set GR t39(r10)
		jump main_14_logical_exit
	main_12_logical_false
		t35(r10) = mov 0
		jump main_14_logical_exit
	main_14_logical_exit
		cmp t31(r10) 1
		CJump EQ main_15_logical_true
		jump main_16_logical_false
	main_15_logical_true
		t30(r8) = mov 1
		jump main_17_logical_exit
	main_16_logical_false
		cmp a(r8) g(r9)
		set EQ t40(r8)
		jump main_17_logical_exit
	main_17_logical_exit
		cmp t30(r8) 1
		CJump EQ main_18_logical_true
		jump main_19_logical_false
	main_18_logical_true
		t29(rsi) = mov 1
		jump main_23_logical_exit
	main_19_logical_false
		cmp d(rdi) 0
		set GR t42(rdi)
		cmp t42(rdi) 1
		CJump NEQ main_21_logical_false
		jump main_20_logical_true
	main_20_logical_true
		cmp f(rsi) 0
		set GR t43(rsi)
		jump main_23_logical_exit
	main_21_logical_false
		t41(rsi) = mov 0
		jump main_23_logical_exit
	main_23_logical_exit
		cmp t29(rsi) 1
		CJump EQ main_1_block_exit
		jump main_1_block_exit
	main_1_block_exit
}
