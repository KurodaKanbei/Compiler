global add
global __global_init
global main
global dp
global print_Int
global println_Int
global print
global println
global getInt
global getString
global toString
global __array_size
global __string_substring
global __string_length
global __string_parseInt
global __string_ord
global __string_connection
global __string_LE
global __string_LEEQ
global __string_GR
global __string_GREQ
global __string_EQ
global __string_NEQ
extern printf, malloc, strcpy, scanf, strlen, sscanf, sprintf, memcpy, strcmp, puts
SECTION .text
add:
    push                  rbp
     mov                  rbp,                  rsp
add_0_block_enter:
     add                  rdi,                  rsi
     mov                  rsi,                  rdi
     mov                  rax,                  rsi
     mov                  rcx,                  233
     cdq
    idiv                  ecx
     mov                  rsi,                  rdx
     mov                  rax,                  rsi
     jmp     add_1_block_exit
add_1_block_exit:
     pop                  rbp
     ret
__global_init:
    push                  rbp
     mov                  rbp,                  rsp
__global_init_0_block_enter:
     jmp __global_init_1_block_exit
__global_init_1_block_exit:
     pop                  rbp
     ret
main:
    push                  rbp
     mov                  rbp,                  rsp
    call        __global_init
main_0_block_enter:
     mov                  rdi,                    1
    call                   dp
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rdi,                    2
    call                   dp
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     ;push rdi
     ;push rsi
     ;push rax
     ;push rbx
     ;push rcx
     ;push rdx
     ;push r8
     ;push r9
     ;push r10
     ;push r11
     ;push r12
     ;push r13
     ;push r14
     ;push r15
     ;mov rdi,  qword [@dp_int + 16]
     ;call println_Int
     ;pop r15
     ;pop r14
     ;pop r13
     ;pop r12
     ;pop r11
     ;pop r10
     ;pop r9
     ;pop r8
     ;pop rdx
     ;pop rcx
     ;pop rbx
     ;pop rax
     ;pop rsi
     ;pop rdi
     mov                  rdi,                    3
    call                   dp
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call             toString
     mov                  rsi,                  rax
     mov                  rdi,                  rsi
    call              println
     mov                  rax,                    0
     jmp    main_1_block_exit
main_1_block_exit:
     pop                  rbp
     ret
dp:
    push                  rbp
     mov                  rbp,                  rsp
     sub                  rsp,                   16
    push                  r12
    push                  r13
    push                  rbx
dp_0_block_enter:
     mov                  r13,                   r9
     sal                  r13,                    3
     mov                  r12,              @dp_int
     add                  r12,                  r13
     sar                  r13,                    3
     cmp                   r9,                    0
     jge      dp_1_dp_success
     jmp        dp_4_dp_start
dp_1_dp_success:
     cmp                   r9,                  200
      jl       dp_2_dp_escape
     jmp        dp_4_dp_start
dp_2_dp_escape:
     cmp      qword [r12 + 0],                    0
      je        dp_4_dp_start
     jmp       dp_3_dp_return
dp_3_dp_return:
     mov                  rax,      qword [r12 + 0]
     jmp     dp_19_block_exit
dp_4_dp_start:
     mov                   r9,                  rdi
     cmp                   r9,                    1
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je         dp_5_if_true
     jmp        dp_6_if_false
dp_5_if_true:
     mov                  rsi,                   36
     mov                  rax,                  rsi
     jmp     dp_19_block_exit
dp_6_if_false:
     jmp         dp_7_if_exit
dp_7_if_exit:
     mov                  rbx,                    0
     mov                   r8,                    2
     jmp  dp_8_loop_condition
dp_8_loop_condition:
     cmp                   r8,                   r9
     mov                  rsi,                    0
   setle                  sil
     cmp                  rsi,                    1
      je       dp_9_loop_body
     jmp      dp_14_loop_exit
dp_9_loop_body:
     mov                  rsi,                   r9
     xor                  rsi,                   r8
     cmp                  rsi,                   r9
     mov                  rsi,                    0
    setl                  sil
     cmp                  rsi,                    1
      je        dp_10_if_true
     jmp       dp_11_if_false
dp_10_if_true:
     mov                  rsi,                   r9
     xor                  rsi,                   r8
     mov                  rdi,                  rsi
    push                   r9
    push                   r8
     sub                  rsp,                    8
    call                   dp
     add                  rsp,                    8
     pop                   r8
     pop                   r9
     mov                  rsi,                  rax
     mov                  rdi,                  rbx
    push                   r9
    push                   r8
     sub                  rsp,                    8
    call                  add
     add                  rsp,                    8
     pop                   r8
     pop                   r9
     mov                  rsi,                  rax
     mov                  rbx,                  rsi
     jmp        dp_12_if_exit
dp_11_if_false:
     jmp        dp_12_if_exit
dp_12_if_exit:
     jmp dp_13_loop_increment
dp_13_loop_increment:
     mov                  rsi,                   r8
     add                   r8,                    1
     jmp  dp_8_loop_condition
dp_14_loop_exit:
     mov                  rax,                  rbx
     jmp        dp_15_dp_save
dp_15_dp_save:
     cmp                  r13,                    0
     jge    dp_16_dp_positive
     jmp        dp_18_dp_fail
dp_16_dp_positive:
     cmp                  r13,                  200
      jl      dp_17_dp_update
     jmp        dp_18_dp_fail
dp_17_dp_update:
     mov      qword [r12 + 0],                  rax
dp_18_dp_fail:
     jmp     dp_19_block_exit
dp_19_block_exit:
     pop                  rbx
     pop                  r13
     pop                  r12
     add                  rsp,                   16
     pop                  rbp
     ret
SECTION .data
@dp_int:
	dq	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,	0,0
SECTION .bss
SECTION .data
__println_int_format:
      db         "%ld", 10, 0
__print_int_format:
      db             "%ld", 0
__print_format:
      db              "%s", 0
__scanf_int_format:
      db             "%ld", 0
__scanf_string_format:
      db              "%s", 0
__toString_format:
      db             "%ld", 0
__parseInt_format:
      db             "%ld", 0
SECTION .bss
__scanf_int_buf:
    resq                    1
__sscanf_int_buf:
    resq                    1
SECTION .text
print_Int:
     mov                  rsi,                  rdi
     mov                  rdi,   __print_int_format
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println_Int:
     mov                  rsi,                  rdi
     mov                  rdi, __println_int_format
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
print:
     mov                  rsi,                  rdi
     mov                  rdi,       __print_format
     sub                  rsp,                    8
    call               printf
     add                  rsp,                    8
     ret
println:
     sub                  rsp,                    8
    call                 puts
     add                  rsp,                    8
     ret
getInt:
     mov                  rdi,   __scanf_int_format
     mov                  rsi,      __scanf_int_buf
     sub                  rsp,                    8
    call                scanf
     add                  rsp,                    8
     mov                  rax, qword [__scanf_int_buf]
     ret
getString:
    push                  r15
     mov                  rdi,                  300
    call               malloc
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi, __scanf_string_format
     mov                  rsi,                  r15
    call                scanf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
toString:
    push                  r15
    push                  rdi
     mov                  rdi,                   20
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,    __toString_format
     pop                  rdx
    call              sprintf
     mov                  rdi,                  r15
    call               strlen
     mov      qword [r15 - 8],                  rax
     mov                  rax,                  r15
     pop                  r15
     ret
__array_size:
     mov                  rax,      qword [rdi - 8]
     ret
__string_length:
     mov                  rax,      qword [rdi - 8]
     ret
__string_parseInt:
     mov                  rsi,   __scanf_int_format
     mov                  rdx,     __sscanf_int_buf
     sub                  rsp,                    8
    call               sscanf
     add                  rsp,                    8
     mov                  rax, qword [__sscanf_int_buf]
     ret
__string_ord:
     add                  rdi,                  rsi
   movsx                  rax,           byte [rdi]
     ret
__string_connection:
    push                  r15
    push                  r14
    push                  r13
     mov                  r15,      qword [rdi - 8]
     add                  r15,      qword [rsi - 8]
     add                  r15,                    9
     mov                  r14,                  rdi
     mov                  r13,                  rsi
     mov                  rdi,                  r15
    call               malloc
     sub                  r15,                    9
     mov          qword [rax],                  r15
     mov                  r15,                  rax
     add                  r15,                    8
     mov                  rdi,                  r15
     mov                  rsi,                  r14
    call               strcpy
     add                  r15,      qword [r14 - 8]
     mov                  r14,                  rax
     mov                  rdi,                  r15
     mov                  rsi,                  r13
    call               strcpy
     mov                  rax,                  r14
     pop                  r13
     pop                  r14
     pop                  r15
     ret
__string_substring:
    push                  r15
    push                  r14
     mov                  r15,                  rdi
     add                  r15,                  rsi
     mov                  r14,                  rdx
     sub                  r14,                  rsi
     add                  r14,                    1
     mov                  rdi,                  r14
     add                  rdi,                    9
     sub                  rsp,                    8
    call               malloc
     add                  rsp,                    8
     add                  rax,                    8
     mov                  rdi,                  rax
     mov                  rsi,                  r15
     mov                  rdx,                  r14
     sub                  rsp,                    8
    call               memcpy
     add                  rsp,                    8
     mov      qword [rax - 8],                  r14
     mov                  r15,                  rax
     add                  r15,                  r14
     mov                  r15,                    0
     pop                  r14
     pop                  r15
     ret
__string_LE:
     cmp                  eax,                    0
     mov                  rax,                    0
    setl                   al
     ret
__string_LEEQ:
     cmp                  eax,                    0
     mov                  rax,                    0
   setle                   al
     ret
__string_GR:
     cmp                  eax,                    0
     mov                  rax,                    0
    setg                   al
     ret
__string_GREQ:
     cmp                  eax,                    0
     mov                  rax,                    0
   setge                   al
     ret
__string_EQ:
     cmp                  eax,                    0
     mov                  rax,                    0
    sete                   al
     ret
__string_NEQ:
     cmp                  eax,                    0
     mov                  rax,                    0
   setne                   al
     ret
